1. Hash password with bycypt

https://www.npmjs.com/package/bcrypt

+ s·ª≠ d·ª•ng sync 

import bcrypt from "bcrypt";

const hashPassword = async (password) => {
  const saltRounds = 10;
  const salt = await bcrypt.genSalt(saltRounds);
  const hash = await bcrypt.hash(password, salt);
  return hash;
};

export { hashPassword };


	* Random User id 
	
	( https://www.npmjs.com/package/uuid )




2. ORM & Setup Sequelize  ( l∆∞u √Ω d√πng v·ªõi commonjs ƒë·ªÉ tr√°nh l·ªói migration )

	1. ORM

+ ORM (Object-Relational Mapping) l√† m·ªôt k·ªπ thu·∫≠t l·∫≠p tr√¨nh cho ph√©p b·∫°n thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu b·∫±ng c√°ch s·ª≠ d·ª•ng object (ƒë·ªëi t∆∞·ª£ng) thay v√¨ vi·∫øt c√°c c√¢u l·ªánh SQL th·ªß c√¥ng. 

ORM gi√∫p b·∫°n:

	+ Truy v·∫•n, ch√®n, c·∫≠p nh·∫≠t, x√≥a d·ªØ li·ªáu qua ƒë·ªëi t∆∞·ª£ng JS.
	+ Kh√¥ng c·∫ßn vi·∫øt SQL tr·ª±c ti·∫øp (ho·∫∑c r·∫•t √≠t).
	+ D·ªÖ b·∫£o tr√¨ v√† ph√°t tri·ªÉn nhanh h∆°n.


	2. Sequelize l√† g√¨ ?

	+ Sequelize l√† m·ªôt ORM cho Node.js h·ªó tr·ª£ nhi·ªÅu lo·∫°i c∆° s·ªü d·ªØ li·ªáu nh∆∞:

	MySQL, PostgreSQL, SQLite, MariaDB

	> N√≥ gi√∫p b·∫°n ƒë·ªãnh nghƒ©a models, t·∫°o migration, v√† t∆∞∆°ng t√°c v·ªõi DB d·ªÖ d√†ng.

	3. Sequelize CLI l√† g√¨ ?

	+ Kh√¥ng b·∫Øt bu·ªôc, nh∆∞ng n·∫øu b·∫°n mu·ªën d√πng migration, seed, t·ª± ƒë·ªông t·∫°o folder chu·∫©n, th√¨ n√™n d√πng sequelize-cli.

	+ sequelize-cli l√† c√¥ng c·ª• d√≤ng l·ªánh ch√≠nh th·ª©c c·ªßa Sequelize ƒë·ªÉ gi√∫p b·∫°n:

T·∫°o folder models, migrations, seeders, config t·ª± ƒë·ªông.

D·ªÖ d√†ng t·∫°o model b·∫±ng l·ªánh: sequelize model:generate

D·ªÖ ch·∫°y migration: sequelize db:migrate

T·∫°o d·ªØ li·ªáu m·∫´u: sequelize db:seed
	


	4. Setup d·ª± √°n v·ªõi Sequelize v√† Sequelize CLI

	B1.

npm install sequelize 
npm install --save-dev sequelize-cli


	B2. t·∫°o .sequelizerc ƒë·ªÉ config n∆°i t·∫°o ra c√°c: config, migrations, models, seeders 


const path = require('path');

module.exports = {
  'config': path.resolve('src', 'config', 'config.json'),
  'models-path': path.resolve('src', 'models'),
  'seeders-path': path.resolve('src', 'seeders'),
  'migrations-path': path.resolve('src', 'migrations'),
};



	B3. 

npx sequelize-cli init


	* Setup database v√† ti·∫øn h√†nh t·∫°o b·∫£ng ƒë·∫ßu ti√™n 

	B1. Connecting to a database and Testing the connection


	( https://sequelize.org/docs/v6/getting-started/ )

	src/config/connectDB.js 

const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: /* one of 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql' | 'db2' | 'snowflake' | 'oracle' */,
  port: number
});
	
const connection = async () => {
  try {
    await sequelize.authenticate();
    console.log("Connection has been established successfully.");
  } catch (error) {
    console.error("Unable to connect to the database:", error);
  }
};

export default connection;

	server.js

connection();


	B2: Creating first model 

( https://sequelize.org/docs/v6/other-topics/migrations/ )

npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

	
	B3: Running migration 


npx sequelize-cli db:migrate

	* L∆∞u √Ω: Congfig database v√† config.json sao cho ƒë√∫ng ( port ) ƒë·ªÉ tr√°nh l·ªói migration v√† s·ª≠ d·ª•ng commonjs 
	
	B4: Th√™m d·ªØ li·ªáu m·∫´u = seeder 

npx sequelize-cli seed:generate --name demo-user

	B5: Running seed

npx sequelize-cli db:seed:all

	


3. ORM Structure - √ù nghƒ©a c·ªßa Model/Migrations/Seeder 

	1. config/config.json 

Ch·ª©a th√¥ng tin c·∫•u h√¨nh k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu cho t·ª´ng m√¥i tr∆∞·ªùng:

development: m√¥i tr∆∞·ªùng ph√°t tri·ªÉn

test: m√¥i tr∆∞·ªùng test

production: m√¥i tr∆∞·ªùng production

> Sequelize CLI s·ª≠ d·ª•ng file n√†y ƒë·ªÉ bi·∫øt c√°ch k·∫øt n·ªëi v√†o database khi ch·∫°y c√°c l·ªánh nh∆∞ db:migrate, db:seed...



	2. models/


T√°c d·ª•ng:

N∆°i ƒë·ªãnh nghƒ©a c√°c model (b·∫£ng trong database).

M·ªói file l√† m·ªôt model t∆∞∆°ng ·ª©ng v·ªõi 1 b·∫£ng.

File index.js trong th∆∞ m·ª•c n√†y s·∫Ω t·ª± ƒë·ªông import v√† li√™n k·∫øt c√°c model v·ªõi nhau (n·∫øu c√≥ quan h·ªá).


	3. migrations/

T√°c d·ª•ng:

Ch·ª©a c√°c file m√¥ t·∫£ s·ª± thay ƒë·ªïi c·∫•u tr√∫c CSDL theo th·ªùi gian (schema migration).

Gi√∫p qu·∫£n l√Ω version v√† l·ªãch s·ª≠ thay ƒë·ªïi schema.

C√≥ th·ªÉ rollback ho·∫∑c migrate t·ªõi m·ªôt tr·∫°ng th√°i b·∫•t k·ª≥.

> Khi ch·∫°y sequelize db:migrate, c√°c file n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán ƒë·ªÉ t·∫°o/c·∫≠p nh·∫≠t b·∫£ng trong DB.


	*  T√°c d·ª•ng c·ªßa c√°c function up v√† down trong file Migration

+ up(queryInterface, Sequelize)

L√† h√†m ƒë∆∞·ª£c g·ªçi khi b·∫°n ch·∫°y migration (sequelize db:migrate).

T√°c d·ª•ng: t·∫°o ho·∫∑c ch·ªânh s·ª≠a b·∫£ng, th√™m c·ªôt, th√™m ch·ªâ m·ª•c, v.v.

N√≥i ƒë∆°n gi·∫£n l√† "√°p d·ª•ng thay ƒë·ªïi m·ªõi v√†o CSDL".


+ down(queryInterface, Sequelize)

L√† h√†m ƒë∆∞·ª£c g·ªçi khi b·∫°n rollback migration (sequelize db:migrate:undo ho·∫∑c db:migrate:undo:all).

T√°c d·ª•ng: ho√†n t√°c nh·ªØng g√¨ up() ƒë√£ l√†m.

N√≥i ƒë∆°n gi·∫£n l√† "tr·ªü v·ªÅ tr·∫°ng th√°i c≈©".


	* B·∫£ng SequelizeMeta l√† g√¨?


B·∫£ng n√†y ƒë∆∞·ª£c Sequelize t·ª± ƒë·ªông t·∫°o ra trong CSDL.

M·ª•c ƒë√≠ch: theo d√µi c√°c migration ƒë√£ ƒë∆∞·ª£c ch·∫°y.

M·ªói khi b·∫°n ch·∫°y sequelize db:migrate, Sequelize:

Ch·∫°y c√°c file migration ch∆∞a c√≥ t√™n trong b·∫£ng SequelizeMeta.

Sau khi ch·∫°y xong, n√≥ s·∫Ω ch√®n t√™n file migration v√†o b·∫£ng n√†y ƒë·ªÉ ƒë√°nh d·∫•u l√† ƒë√£ ch·∫°y.


	4. seeders/

T√°c d·ª•ng:

Ch·ª©a c√°c file d√πng ƒë·ªÉ th√™m d·ªØ li·ªáu m·∫´u v√†o c∆° s·ªü d·ªØ li·ªáu (d√πng cho dev/test/demo).

Th√™m nhi·ªÅu d·ªØ li·ªáu m·∫´u ch·ª© k ph·∫£i l√†m vi·ªác CRUD

C√≥ th·ªÉ t·∫°o d·ªØ li·ªáu ban ƒë·∫ßu cho b·∫£ng ng∆∞·ªùi d√πng, s·∫£n ph·∫©m, v.v.


		
‚úÖ T·ªïng k·∫øt
Th∆∞ m·ª•c/file		Vai tr√≤ ch√≠nh
config/config.json	K·∫øt n·ªëi CSDL cho t·ª´ng m√¥i tr∆∞·ªùng
models/			ƒê·ªãnh nghƒ©a c·∫•u tr√∫c b·∫£ng (Model)
migrations/		Qu·∫£n l√Ω thay ƒë·ªïi schema CSDL
seeders/		T·∫°o d·ªØ li·ªáu m·∫´u ban ƒë·∫ßu



	*L∆∞u √Ω: m·∫∑c ƒë·ªãnh khi t·∫°o table s·∫Ω th√™m s sau t√™n. m·∫∑c d√π n√≥ kh√¥ng quan tr·ªçng l·∫Øm 


 "development": {
    "username": "root",
    "password": "1208",
    "database": "jwt-roles",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "port": "8888",
    "define": {
      "freezeTableName": true 
    }
  },

	> s·ª≠ d·ª•ng freezeTableName ƒë·ªÉ cho n√≥ kh√¥ng t·ª± ƒë·ªông th√™m s 




4. CRUD v·ªõi Sequelize 

	( https://sequelize.org/docs/v6/core-concepts/model-querying-basics/ )
 
	
	1. CREATE (T·∫°o m·ªõi d·ªØ li·ªáu) 

const user = await User.create({
  name: 'Nguy·ªÖn VƒÉn A',
  email: 'nguyenvana@example.com'
});

> Sequelize s·∫Ω t·ª± ƒë·ªông t·∫°o c√¢u l·ªánh INSERT INTO d·ª±a tr√™n model User. 


 	2. READ (ƒê·ªçc d·ªØ li·ªáu)
	

üëâ T√¨m t·∫•t c·∫£ b·∫£n ghi:

	const users = await User.findAll();

üëâ T√¨m theo ƒëi·ªÅu ki·ªán:

	const user = await User.findOne({
  where: { email: 'nguyenvana@example.com' }
});

üëâ T√¨m theo ID:

const user = await User.findByPk(1); // T√¨m theo primary key


	3. UPDATE (C·∫≠p nh·∫≠t d·ªØ li·ªáu)

await User.update(
  { name: 'Nguy·ªÖn VƒÉn B' },
  { where: { id: 1 } }
);

> Sequelize s·∫Ω t·∫°o c√¢u l·ªánh UPDATE t∆∞∆°ng ·ª©ng.

	
	4. DELETE (Xo√° d·ªØ li·ªáu)

await User.destroy({
  where: { id: 1 }
});


	L∆∞u √Ω:

T·∫°i sao k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† Sequelize instance (Entity) nh∆∞ng v·∫´n render ra object JSON trong EJS?
	
	+ Sequelize instance (nh∆∞ user b·∫°n nh·∫≠n ƒë∆∞·ª£c) c√≥ s·∫µn ph∆∞∆°ng th·ª©c .toJSON() v√† toString(), n√™n khi b·∫°n truy·ªÅn v√†o EJS ho·∫∑c console.log(JSON.stringify(user)), n√≥ t·ª± ƒë·ªông chuy·ªÉn th√†nh plain object.

	=> k c·∫ßn vi·∫øt: 
const plainUser = user

	> .get({ plain: true }); // T∆∞∆°ng ƒë∆∞∆°ng v·ªõi toJSON 
	
	ho·∫∑c 

 let user = await db.User.findOne({
      where: { email: data.email },
      raw: true,
    });


5. MongoDB vs MySQL


	1. MongoDB (NoSQL)
	
	+ D·ªØ li·ªáu d·∫°ng document(JSON)
	+ linh ho·∫°t, k c·∫ßn schema 
	+ kh√¥ng h·ªó tr·ª£ join truy·ªÅn th·ªëng 
	+ t·ªët cho d·ªØ li·ªáu phi c·∫•u tr√∫c 
	+ linh ho·∫°t, d·ªÖ scale 


	2. MySQL (SQL)

	+ D·ªØ li·ªáu d·∫°ng b·∫£ng 
	+ c·∫ßn schema c·ªë ƒë·ªãnh 
	+ h·ªó tr·ª£ join m·∫°nh 
	+ t·ªët cho d·ªØ li·ªáu quan h·ªá 
	+ tu√¢n th·ªß ACID 

üîπ N√™n d√πng khi n√†o?

MySQL: App t√†i ch√≠nh, CRM, ERP, c·∫ßn JOIN v√† t√≠nh ch√≠nh x√°c cao.

MongoDB: Social app, MVP, d·ªØ li·ªáu linh ho·∫°t, scale l·ªõn, c·∫ßn ph√°t tri·ªÉn nhanh.


V√≠ d·ª• d·ª± √°n ph√π h·ª£p SQL:

H·ªá th·ªëng ng√¢n h√†ng, k·∫ø to√°n (quan h·ªá ph·ª©c t·∫°p, c·∫ßn t√≠nh ch√≠nh x√°c).

Website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ (qu·∫£n l√Ω s·∫£n ph·∫©m, kh√°ch h√†ng, ƒë∆°n h√†ng).

·ª®ng d·ª•ng qu·∫£n l√Ω tr∆∞·ªùng h·ªçc (l·ªõp h·ªçc, sinh vi√™n, ƒëi·ªÉm s·ªë).

B·∫•t c·ª© app n√†o m√† t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu l√† s·ªë 1.


V√≠ d·ª• d·ª± √°n ph√π h·ª£p NoSQL:

M·∫°ng x√£ h·ªôi (b√†i ƒëƒÉng, b√¨nh lu·∫≠n, like‚Ä¶ l∆∞u d·∫°ng document).

Realtime chat (WebSocket + MongoDB/Redis).

H·ªá th·ªëng log, analytics, tracking (d·ªØ li·ªáu kh·ªïng l·ªì, c·∫ßn l∆∞u nhanh).

Game online (tr·∫°ng th√°i ng∆∞·ªùi ch∆°i, leaderboard‚Ä¶).


6. Kh√°i ni·ªám ACL 

	+ Access Control List (ACL) trong backend l√† m·ªôt k·ªπ thu·∫≠t ƒë·ªÉ ki·ªÉm so√°t quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng ho·∫∑c nh√≥m ng∆∞·ªùi d√πng ƒë·∫øn c√°c t√†i nguy√™n c·ª• th·ªÉ trong h·ªá th·ªëng (nh∆∞ API, file, d·ªØ li·ªáu...).


	+ üîê ACL d√πng ƒë·ªÉ l√†m g√¨?

Ki·ªÉm so√°t ai c√≥ quy·ªÅn xem / ch·ªânh s·ª≠a / xo√° / t·∫°o g√¨

B·∫£o m·∫≠t h·ªá th·ªëng

Ph√¢n quy·ªÅn r√µ r√†ng cho t·ª´ng user, role	


7. C√°c ki·ªÉu d·ªØ li·ªáu c·ªßa Sequelize 

( https://sequelize.org/docs/v6/core-concepts/model-basics/#data-types )



8. Create Model(Table) with Sequelize 

	+ ƒë·ªÉ t·∫°o 1 model v√† push v√†o database ta c·∫ßn 


	C1. T·∫°o auto v·ªõi c√¢u l·ªánh


npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string



	C2. t·ª± t·∫°o th·ªß c√¥ng b·∫±ng vi·ªác t·∫°o file trong model v√† migration

	* L∆∞u √Ω: T√™n file b√™n trong migration l√†: migrate-....


	> sau khi oke c·∫£ migration v√† model ch·∫°y 

	npx sequelize-cli db:migrate

	
Ch√∫ √Ω: ƒë·ªÉ tr√°nh cho t√™n k ƒë√∫ng nh∆∞ ƒë·∫∑t b·ªã th√™m S trong config.json th√™m: 


"port": "8888",

"define": {
      "freezeTableName": true 
    }





9. Relationship in Sequelize 

	( https://sequelize.org/docs/v6/core-concepts/assocs/ )
	( https://sequelize.org/docs/v6/advanced-association-concepts/eager-loading/ )

	1. Thu·∫≠t ng·ªØ Eager Loading 

	+ Eager Loading trong Sequelize l√† k·ªπ thu·∫≠t t·∫£i tr∆∞·ªõc (preload) c√°c d·ªØ li·ªáu li√™n quan gi·ªØa c√°c b·∫£ng (models) trong c√πng m·ªôt truy v·∫•n SQL th√¥ng qua include, gi√∫p tr√°nh vi·ªác truy v·∫•n l·∫∑p l·∫°i nhi·ªÅu l·∫ßn (N+1 queries problem).

	üìå Hi·ªÉu ƒë∆°n gi·∫£n:

Thay v√¨ l·∫•y d·ªØ li·ªáu b·∫£ng ch√≠nh r·ªìi l·∫°i truy v·∫•n ri√™ng ƒë·ªÉ l·∫•y d·ªØ li·ªáu b·∫£ng li√™n quan, Sequelize cho ph√©p b·∫°n l·∫•y t·∫•t c·∫£ c√πng l√∫c.


	2. Relationship 


	>> Th√¥ng th∆∞·ªùng ta c√≥ c√°c m·ªëi quan h·ªá nh∆∞ sau 

	> One-to-One 
	> One-to-Many 
	> Many-to-Many 

	
	>> Sequelize provie 4 ki·ªÉu relationship thay th·∫ø

	The HasOne association
	The BelongsTo association
	The HasMany association
	The BelongsToMany association


		1. A.hasOne(B)

	+ Quan h·ªá: One-To-One
	+ Foreign key n·∫±m ·ªü: model B (target)


		2. A.belongsTo(B)

	Quan h·ªá: One-To-One
	Foreign key n·∫±m ·ªü: model A (source)

		
		3. A.hasMany(B)

	Quan h·ªá: One-To-Many
	Foreign key n·∫±m ·ªü: model B (target)
	

		4. A.belongsToMany(B, { through: 'C' })

	Quan h·ªá: Many-To-Many
	S·ª≠ d·ª•ng b·∫£ng trung gian: C (junction table)
	Sequelize s·∫Ω t·ª± t·∫°o b·∫£ng C v·ªõi c√°c kh√≥a ngo·∫°i (nh∆∞ aId, bId) n·∫øu ch∆∞a c√≥.

VD: 

module.exports = (sequelize, DataTypes) => {
  class Group extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {

      Group.hasMany(models.User);
      Group.belongsToMany(models.Role, { through: "GroupRole" });

    }
  }



  	
	3.S·ª≠ d·ª•ng include

	+ S·ª≠ d·ª•ng inclue c·ªßa sequelize c≈©ng gi·ªëng nh∆∞ ƒëang s·ª≠ d·ª•ng JOIN 

	VD: 

+ Ta c√≥ 2 model nh∆∞ sau: 

// User model
User.hasMany(Post); // M·ªôt user c√≥ nhi·ªÅu b√†i post

// Post model
Post.belongsTo(User); // M·ªôt post thu·ªôc v·ªÅ m·ªôt user


> Truy v·∫•n l·∫•y ra t·∫•t c·∫£ user v√† b√†i vi·∫øt t∆∞∆°ng ·ª©ng v·ªõi id c·ªßa h·ªç: 

const users = await User.findAll({
  include: Post, // ho·∫∑c { model: Post }
});

ƒêi·ªÅu n√†y t∆∞∆°ng ƒë∆∞∆°ng v·ªõi:

" SELECT * FROM Users
LEFT OUTER JOIN Posts ON Users.id = Posts.UserId; "


	* include n√¢ng cao 

3.1. Ch·ªâ l·∫•y m·ªôt s·ªë c·ªôt t·ª´ b·∫£ng li√™n k·∫øt:

const users = await User.findAll({
  include: {
    model: Post,
    attributes: ['title', 'createdAt']
  }
});

3.2. ƒêi·ªÅu ki·ªán l·ªçc trong include

const users = await User.findAll({
  include: {
    model: Post,
    where: {
      published: true
    }
  }
});



	
	4. X·ª≠ l√Ω l·ªói c√≥ 2 foreign key khi t·ª± khai b√°o v√† sequelize generate 

	 
	VD:

	User.belongsTo(models.Group);
	groupID: DataTypes.INTEGER,

	> s·∫Ω c√≥ 2 foreign key ƒë∆∞·ª£c sinh ra 

	+ Kh·∫Øc ph·ª•c b·∫±ng c√°ch ch·ªß ƒë·ªông ƒë∆∞a khai b√°o foreign key cho n√≥

User.belongsTo(models.Group, {
  foreignKey: "groupID" // d√πng ch√≠nh c·ªôt b·∫°n ƒë·ªãnh nghƒ©a
});

	
	5. k in ra d·ªØ li·ªáu t·ª´ b·∫£ng trung gian 

 include: {
      model: db.Role,
      attributes: ["id", "url", "description"],
      through: { attributes: [] },
    },


	> through



10. CORS l√† g√¨ ? 

	Q: th√¥ng th∆∞·ªùng khi ta g·ªçi API t·ª´ FE ƒë·∫øn BE m√† c√≥ 2 domain kh√°c nhau th√¨ s·∫Ω g·∫∑p l·ªói CORS. V·∫≠y n√≥ l√† g√¨ ?

	
	+ Kh√°i ni·ªám: 

CORS (vi·∫øt t·∫Øt c·ªßa: Cross-Origin Resource Sharing): l√† m·ªôt c∆° ch·∫ø b·∫£o m·∫≠t c·ªßa tr√¨nh duy·ªát, gi√∫p ki·ªÉm so√°t xem m·ªôt website (g·ªçi l√† origin) c√≥ ƒë∆∞·ª£c ph√©p truy c·∫≠p t√†i nguy√™n t·ª´ m·ªôt website kh√°c hay kh√¥ng.

	VD: 

Origin = protocol + domain + port

V√≠ d·ª•:

https://example.com:443

http://localhost:3000

N·∫øu hai origin kh√°c nhau (kh√°c protocol, domain ho·∫∑c port), th√¨ khi frontend g·ª≠i request t·ªõi backend ·ªü origin kh√°c, ƒë√≥ ƒë∆∞·ª£c g·ªçi l√† cross-origin request.


	2Ô∏è‚É£ T·∫°i sao CORS t·ªìn t·∫°i?
	
	+ CORS sinh ra gi√∫p ch·∫∑n c√°c request l·∫° ƒë·∫øn BE m√† kh√¥ng ƒë∆∞·ª£c cho ph√©p, tr·ª´ khi ta cho ph√©p th√¥ng qua header  Access-Control-Allow-Origin.


	3Ô∏è‚É£ C√°ch ho·∫°t ƒë·ªông c∆° b·∫£n c·ªßa CORS

	B1: Khi frontend (·ªü origin A - kh√°c domain) g·ª≠i request ƒë·∫øn backend (·ªü origin B - kh√°c 	domain), tr√¨nh duy·ªát s·∫Ω g·ª≠i k√®m theo m·ªôt CORS check.

	B2: N·∫øu server B ph·∫£n h·ªìi v·ªõi header Access-Control-Allow-Origin: A th√¨ tr√¨nh duy·ªát m·ªõi cho 	ph√©p l·∫•y d·ªØ li·ªáu.

	B3: N·∫øu kh√¥ng c√≥ header n√†y, tr√¨nh duy·ªát s·∫Ω ch·∫∑n response (m·∫∑c d√π request c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c g·ª≠i 	th√†nh c√¥ng t·ª´ ph√≠a server).


üëâ T√≥m l·∫°i:
CORS l√† c∆° ch·∫ø ki·ªÉm so√°t b·∫£o m·∫≠t quan tr·ªçng c·ªßa tr√¨nh duy·ªát, b·∫£o v·ªá server kh·ªèi vi·ªác b·ªã g·ªçi t·ª´ nh·ªØng website kh√¥ng ƒë∆∞·ª£c ph√©p.

	

	
	2. X·ª≠ l√Ω CORS b√™n server

	( https://stackoverflow.com/questions/18310394/no-access-control-allow-origin-node-apache-port-issue )

// server.js

// Add headers before the routes are defined
app.use(function (req, res, next) {

    // Website you wish to allow to connect
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');

    // Request methods you wish to allow
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

    // Request headers you wish to allow
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');

    // Set to true if you need the website to include cookies in the requests sent
    // to the API (e.g. in case you use sessions)
    res.setHeader('Access-Control-Allow-Credentials', true);

    // Pass to next layer of middleware
    next();
});


11. Session Storage vs Local Storage vs Cookies

	 1. Local Storage 
		
		+ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u vƒ©nh vi·ªÖn cho ƒë·∫øn khi ch·ªß ƒë·ªông thay ƒë·ªïi
		
		+ Dung l∆∞·ª£ng kh√° l·ªõn (th∆∞·ªùng t·ª´ 5MB ƒë·∫øn 10MB, t√πy tr√¨nh duy·ªát).
		
		+ D·ªØ li·ªáu ch·ªâ c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c b·ªüi c√πng domain ƒë√£ t·∫°o ra n√≥.
		
		+ Ch·ªâ h·ªó tr·ª£ l∆∞u d·ªØ li·ªáu d·∫°ng chu·ªói (string), n√™n n·∫øu mu·ªën l∆∞u object ph·∫£i d√πng JSON.stringify() v√† JSON.parse() ƒë·ªÉ chuy·ªÉn ƒë·ªïi.
		
		+ Kh√¥ng t·ª± ƒë·ªông g·ª≠i d·ªØ li·ªáu l√™n server trong m·ªói request HTTP.
		
		+ Ph√π h·ª£p ƒë·ªÉ l∆∞u nh·ªØng d·ªØ li·ªáu kh√¥ng nh·∫°y c·∫£m nh∆∞ theme (light/dark), user preference, token t·∫°m th·ªùi...


	2Ô∏è‚É£ Session Storage


Gi·ªëng g·∫ßn nh∆∞ y h·ªát Local Storage v·ªÅ c∆° ch·∫ø l∆∞u tr·ªØ, nh∆∞ng ch·ªâ t·ªìn t·∫°i trong 1 phi√™n l√†m vi·ªác (session).

Khi ng∆∞·ªùi d√πng ƒë√≥ng tab ho·∫∑c tr√¨nh duy·ªát => d·ªØ li·ªáu b·ªã x√≥a.

C≈©ng c√≥ dung l∆∞·ª£ng kh√° l·ªõn (5MB tr·ªü l√™n).

C≈©ng kh√¥ng g·ª≠i k√®m d·ªØ li·ªáu l√™n server khi g·ªçi API.

Th∆∞·ªùng d√πng ƒë·ªÉ l∆∞u c√°c d·ªØ li·ªáu t·∫°m th·ªùi nh∆∞ form ƒëang nh·∫≠p d·ªü, b∆∞·ªõc hi·ªán t·∫°i c·ªßa 1 wizard, v.v.

	
	3Ô∏è‚É£ Cookies


D·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c l∆∞u trong 1 th·ªùi gian x√°c ƒë·ªãnh (t√πy expires ho·∫∑c max-age) ho·∫∑c phi√™n l√†m vi·ªác.

Dung l∆∞·ª£ng r·∫•t nh·ªè, th∆∞·ªùng gi·ªõi h·∫°n ~4KB.

Quan tr·ªçng: cookie ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông l√™n server trong m·ªói request HTTP (n·∫øu c√πng domain, c√πng path, security rule cho ph√©p).

Th√≠ch h·ª£p ƒë·ªÉ l∆∞u th√¥ng tin c·∫ßn g·ª≠i k√®m server m·ªói l·∫ßn g·ªçi nh∆∞: session id, JWT token, tracking info, v.v.

C√≥ th·ªÉ c·∫•u h√¨nh b·∫£o m·∫≠t nh∆∞ Secure, HttpOnly, SameSite ƒë·ªÉ h·∫°n ch·∫ø r·ªßi ro (XSS, CSRF‚Ä¶).

Cookies c√≥ th·ªÉ truy c·∫≠p t·ª´ c·∫£ client-side (n·∫øu kh√¥ng ƒë·∫∑t HttpOnly) ho·∫∑c ch·ªâ server-side.




11. JWT - JSON Web Token 

	‚úÖ 1. JWT l√† g√¨?

L√† m·ªôt chu·ªói token m√£ h√≥a, ƒë·∫°i di·ªán cho th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c.

Gi√∫p x√°c minh danh t√≠nh v√† ƒë·∫£m b·∫£o r·∫±ng d·ªØ li·ªáu truy·ªÅn gi·ªØa client v√† server l√† ƒë√°ng tin c·∫≠y v√† kh√¥ng b·ªã gi·∫£ m·∫°o.

	‚úÖ 2. C·∫•u tr√∫c c·ªßa JWT

	JWT c√≥ 3 ph·∫ßn ch√≠nh, ƒë∆∞·ª£c ngƒÉn c√°ch b·∫±ng d·∫•u . (dot):

	<Header>.<Payload>.<Signature>

		‚úÖ 1. Header:
			
		{
 		 "alg": "HS256",
  		"typ": "JWT"
		}

alg: thu·∫≠t to√°n d√πng ƒë·ªÉ k√Ω (th∆∞·ªùng l√† HS256).

typ: ki·ªÉu token (lu√¥n l√† JWT).

		‚úÖ 2. Payload:

Ch·ª©a d·ªØ li·ªáu (claims) nh∆∞ user ID, username, vai tr√≤...

C√≥ th·ªÉ c√≥ c√°c claims chu·∫©n: iss (issuer), exp (expiration), sub (subject), iat (issued at).
		

		‚úÖ 3. Signature:
		D√πng ƒë·ªÉ x√°c minh t√≠nh to√†n v·∫πn c·ªßa token.

		ƒê∆∞·ª£c t·∫°o b·∫±ng c√¥ng th·ª©c:	
	
		HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  secret
)

	‚úÖ 3. C√°ch JWT ho·∫°t ƒë·ªông

üß© B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p
Client g·ª≠i th√¥ng tin ƒëƒÉng nh·∫≠p (username, password) ƒë·∫øn server.

Server x√°c minh -> n·∫øu h·ª£p l·ªá, t·∫°o JWT v√† tr·∫£ v·ªÅ cho client.


üß© B∆∞·ªõc 2: S·ª≠ d·ª•ng token
Client l∆∞u JWT (th∆∞·ªùng trong localStorage ho·∫∑c cookie).

M·ªói request ti·∫øp theo ƒë·∫øn server ƒë·ªÅu ƒë√≠nh k√®m token qua Authorization header:

Authorization: Bearer <token>


üß© B∆∞·ªõc 3: Server x√°c minh token
Server d√πng secret/key ƒë·ªÉ gi·∫£i m√£ v√† x√°c minh ch·ªØ k√Ω.

N·∫øu h·ª£p l·ªá ‚Üí x·ª≠ l√Ω request. N·∫øu kh√¥ng h·ª£p l·ªá ‚Üí tr·∫£ v·ªÅ l·ªói 401.

‚úÖ 4. Vai tr√≤ quan tr·ªçng c·ªßa JWT

Vai tr√≤				√ù nghƒ©a
üîê X√°c th·ª±c			Gi√∫p x√°c minh user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
üìú Kh√¥ng tr·∫°ng th√°i (Stateless)	Server kh√¥ng c·∫ßn l∆∞u session ‚Äî t·∫•t c·∫£ n·∫±m trong token
üéØ Ph√¢n quy·ªÅn			D·ªÖ d√†ng ki·ªÉm tra role/permission trong payload
‚ö° Nhanh & ti·ªán l·ª£i		Kh√¥ng ph·∫£i truy v·∫•n database m·ªói l·∫ßn x√°c minh
üåê Ph·ªï bi·∫øn			ƒê∆∞·ª£c d√πng r·ªông r√£i trong API RESTful, SPA, microservices, v.v.


‚úÖ 5. L∆∞u √Ω b·∫£o m·∫≠t khi d√πng JWT

Kh√¥ng n√™n l∆∞u token trong localStorage n·∫øu mu·ªën tr√°nh XSS (n√™n d√πng HttpOnly Cookie).

Token c·∫ßn h·∫øt h·∫°n (exp) ƒë·ªÉ tr√°nh b·ªã s·ª≠ d·ª•ng l√¢u d√†i.

D√πng HTTPS ƒë·ªÉ b·∫£o v·ªá token kh·ªèi b·ªã ƒë√°nh c·∫Øp tr√™n m·∫°ng.

Kh√¥ng n√™n l∆∞u th√¥ng tin nh·∫°y c·∫£m trong payload (v√¨ n√≥ kh√¥ng ƒë∆∞·ª£c m√£ h√≥a, ch·ªâ ƒë∆∞·ª£c m√£ h√≥a ch·ªØ k√Ω).


‚úÖ 6. M·ªëi quan h·ªá c·ª• th·ªÉ gi·ªØa JWT v√† Cookies


	‚úÖ V√≠ d·ª• m·ªëi quan h·ªá: JWT l∆∞u trong Cookie

	üßæ B∆∞·ªõc 1: Sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
	Server t·∫°o JWT, sau ƒë√≥ set v√†o cookie:

	Set-Cookie: token=eyJhbGci...; HttpOnly; Secure; SameSite=Strict


	üåê B∆∞·ªõc 2: Tr√¨nh duy·ªát l∆∞u cookie
	Cookie ch·ª©a JWT s·∫Ω ƒë∆∞·ª£c l∆∞u v√† g·ª≠i t·ª± ƒë·ªông trong c√°c request ti·∫øp theo:
	
	üîê B∆∞·ªõc 3: Server x√°c th·ª±c JWT t·ª´ cookie
	Server l·∫•y JWT t·ª´ cookie ‚Üí x√°c minh ‚Üí n·∫øu h·ª£p l·ªá th√¨ cho truy c·∫≠p t√†i nguy√™n.


	
12. S·ª≠ d·ª•ng JWT 

	( https://github.com/auth0/node-jsonwebtoken )
	
	+ ƒê·ªÉ s·ª≠ d·ª•ng token ta c·∫ßn ph·∫£i t·∫°o v√† verify n√≥ 

	+ S·∫Ω c√≥ 2 c√°ch vi·∫øt. tuy nhi√™n ta s·∫Ω th·ªëng nh·∫•t d√πng c√°ch ƒë·ªìng b·ªô ƒë·ªÉ k c·∫ßn truy·ªÅn callback, d√πng async/await 

	VD: h√†m create JWT v√† verify JWT

const createJWT = () => {
  try {
    let data = {
      foo: "car",
    };
   let token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "1h" });
    return token;
  } catch (error) {
    console.log("Wrong");
    return null;
  }
};

const verifyJWT = (token) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return decoded;
  } catch (err) {
    console.log("Wrong");
    return null;
  }
};



13. S·ª≠ d·ª•ng cookie-parser 

	KN: 

	cookie-parser l√† m·ªôt middleware ph·ªï bi·∫øn trong Node.js (th∆∞·ªùng d√πng v·ªõi Express.js) gi√∫p ph√¢n t√≠ch (parse) c√°c cookie ƒë∆∞·ª£c g·ª≠i t·ª´ client trong c√°c HTTP request. Khi client g·ª≠i request ƒë·∫øn server, c√°c cookie ƒë∆∞·ª£c g·ª≠i k√®m trong header, v√† cookie-parser gi√∫p b·∫°n d·ªÖ d√†ng truy c·∫≠p v√† x·ª≠ l√Ω ch√∫ng.


	C√°ch s·ª≠ d·ª•ng: 

const express = require('express');
const cookieParser = require('cookie-parser');

const app = express();

// D√πng middleware cookie-parser
app.use(cookieParser('your-secret-key'));


	T√≠nh nƒÉng 

T√≠nh nƒÉng	M√¥ t·∫£
Parse cookie	Bi·∫øn Cookie trong request.headers th√†nh ƒë·ªëi t∆∞·ª£ng JavaScript.

H·ªó tr·ª£ signed cookies	D√πng secret key ƒë·ªÉ b·∫£o v·ªá cookie, tr√°nh b·ªã s·ª≠a t·ª´ client.

Truy c·∫≠p d·ªÖ d√†ng qua req.cookies v√† req.signedCookies	

	
	* L∆∞u √Ω: res.cookie() c√≥ s·∫µn trong express nh∆∞ng req.cookie th√¨ kh√¥ng 


	VD:

	+ sau khi login ta s·∫Ω set cookie v√†o web v·ªõi c√°c gi√° tr·ªã nh·∫•t ƒë·ªãnh 

const signInUser = async (req, res) => {
  try {
    const data = await handleSignIn(req.body);

    // Set Cookie
    res.cookie("jwt", data.DT.access_token, { httpOnly: true });

    return res.status(200).json({
      EM: data.EM,
      EC: data.EC,
      data: data.DT,
    });
  } catch (error) {
    return res.status(500).json({
      EM: "Error from server",
      EC: "-1",
      data: "",
    });
  }
};

	> tuy nhi√™n s·∫Ω c√≥ l·ªói x·∫£y ra v√† ta c·∫ßn ph·∫£i ch·ªânh s·ª≠a ·ªü axios config m·ªõi c√≥ th·ªÉ set dc cookie 

	 + instance.defaults.withCredentials = true;
	
	Gi·∫£i th√≠ch: 

 Khi b·∫°n g·ª≠i request t·ª´ tr√¨nh duy·ªát ƒë·∫øn m·ªôt origin kh√°c (cross-origin request), tr√¨nh duy·ªát s·∫Ω KH√îNG g·ª≠i cookie k√®m theo n·∫øu b·∫°n kh√¥ng b·∫≠t withCredentials.

M·∫∑c ƒë·ªãnh axios s·∫Ω KH√îNG g·ª≠i cookie k√®m theo trong request khi frontend v√† backend kh√°c origin.

withCredentials: true y√™u c·∫ßu axios g·ª≠i cookie (ho·∫∑c nh·∫≠n cookie) trong request d√π request ƒë√≥ l√† cross-origin.


	+ c√≥ c√°i n√†y khi client g·ª≠i req l√™n server s·∫Ω g·ª≠i k√®m t·∫•t c·∫£ cookie c·ªßa web m√† th·ªèa m√£n ƒëi·ªÅu ki·ªán l√™n ()
	
	
	>> ta c√≥ th·ªÉ t·ª± custome req. theo √Ω m√¨nh: 

  if (decoded) {
      req.user = decoded;
      next();
    } else {



14. Bearer Authentication - X√°c th·ª±c v·ªõi Header Token 

	1. Bearer Authentication 
	
	+ l√† ph∆∞∆°ng ph√°p x√°c th·ª±c trong ƒë√≥ client g·ª≠i token trong ph·∫ßn Authorization header c·ªßa HTTP request ƒë·ªÉ ch·ª©ng minh danh t√≠nh.

	C√∫ ph√°p: Authorization: Bearer <token>


‚úÖ Khi n√†o d√πng c√°i n√†o?
Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng				N√™n d√πng g√¨
App SPA (React, Vue, Angular)			Bearer Token (ho·∫∑c JWT token-based)
Web truy·ªÅn th·ªëng (SSR: PHP, Laravel, Django...)	Cookie
C·∫ßn b·∫£o m·∫≠t cao (tr√°nh XSS)			Cookie + HttpOnly
C·∫ßn tr√°nh CSRF					Bearer Token ho·∫∑c Cookie v·ªõi SameSite=strict

	
	2. S·ª≠ d·ª•ng bearer token sao cho kh√¥ng b·ªã l·ªói CORS 
	
	+ Th√¥ng th∆∞·ªùng ta s·∫Ω l∆∞u token ·ªü localstorage sau ƒë√≥ truy·ªÅn qua header authorization 

	> s·ª≠ d·ª•ng v·ªõi axios 

	instance.defaults.headers.common[
  "Authorization"
] = `Bearer ${localStorage.getItem("token")}`;

	
	+ Ta c·∫ßn ph·∫£i config th√™m b√™n server ƒë·ªÉ tr√°nh l·ªói 

 res.setHeader(
      "Access-Control-Allow-Headers",
      "X-Requested-With,content-type, Authorization"
    );

    // Set to true if you need the website to include cookies in the requests sent
    // to the API (e.g. in case you use sessions)
    res.setHeader("Access-Control-Allow-Credentials", true);

    if (req.method === "OPTIONS") {
      return res.sendStatus(200);
    }

	> Th√™m authorization v√† return status 



15. M·ªü r·ªông. B·∫£o m·∫≠t JWT token v√† c√°c lo·∫°i h√¨nh t·∫•n c√¥ng 

üîí K·∫øt lu·∫≠n:
N√™n d√πng cookie c√≥ flag HttpOnly + Secure + SameSite=Strict/Lax n·∫øu b·∫°n mu·ªën b·∫£o m·∫≠t JWT t·ªëi ƒëa.


‚ö†Ô∏è 2. Nh·ªØng ki·ªÉu t·∫•n c√¥ng ph·ªï bi·∫øn li√™n quan ƒë·∫øn JWT (v√† web app n√≥i chung)

a. XSS (Cross-Site Scripting)
K·∫ª t·∫•n c√¥ng ch√®n m√£ JavaScript ƒë·ªôc v√†o trang web (v√≠ d·ª•: trong form, comment, URL‚Ä¶)

N·∫øu JWT l∆∞u ·ªü localStorage, JS c√≥ th·ªÉ localStorage.getItem('token') v√† g·ª≠i token v·ªÅ server c·ªßa hacker.


b. CSRF (Cross-Site Request Forgery)
T·∫•n c√¥ng khi d√πng cookie-based auth

V√≠ d·ª•: ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v√†o bank.com, hacker g·ª≠i 1 y√™u c·∫ßu gi·∫£ m·∫°o t·ª´ evil.com, tr√¨nh duy·ªát v·∫´n g·ª≠i cookie theo m·∫∑c ƒë·ªãnh.


	D√πng SameSite=Strict ho·∫∑c Lax trong cookie

....

16. Refresh token.

üîê 1. Refresh Token l√† g√¨?
Access Token: L√† token ch√≠nh ƒë·ªÉ truy c·∫≠p API. Th∆∞·ªùng c√≥ th·ªùi gian s·ªëng ng·∫Øn (v√≠ d·ª•: 15 ph√∫t, 1 gi·ªù) ƒë·ªÉ gi·∫£m thi·ªÉu r·ªßi ro n·∫øu b·ªã l·ªô.

Refresh Token: L√† token d√†i h·∫°n h∆°n (c√≥ th·ªÉ s·ªëng v√†i ng√†y, v√†i tu·∫ßn), d√πng ƒë·ªÉ xin c·∫•p l·∫°i Access Token m·ªõi m√† kh√¥ng c·∫ßn ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p l·∫°i.


üîÅ 2. Nguy√™n l√Ω ho·∫°t ƒë·ªông

Gi·∫£ s·ª≠ h·ªá th·ªëng s·ª≠ d·ª•ng JWT, ƒë√¢y l√† c√°ch ho·∫°t ƒë·ªông:

üîπ Khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p:
Server x√°c th·ª±c th√¥ng tin t√†i kho·∫£n.

Server tr·∫£ v·ªÅ cho client:

accessToken (h·∫°n 15 ph√∫t ch·∫≥ng h·∫°n)

refreshToken (h·∫°n 7 ng√†y ho·∫∑c h∆°n)

üîπ Khi accessToken h·∫øt h·∫°n:
Client t·ª± ƒë·ªông g·ª≠i refreshToken l√™n server (qua endpoint nh∆∞ /refresh-token).

Server ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa refreshToken:

N·∫øu h·ª£p l·ªá ‚Üí c·∫•p l·∫°i accessToken m·ªõi (v√† c√≥ th·ªÉ l√† refreshToken m·ªõi).

N·∫øu kh√¥ng h·ª£p l·ªá ‚Üí y√™u c·∫ßu ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p l·∫°i.

üîπ Khi ng∆∞·ªùi d√πng logout:
Server s·∫Ω x√≥a ho·∫∑c v√¥ hi·ªáu h√≥a refreshToken.







	
	
	