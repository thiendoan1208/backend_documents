1. Redis l√† g√¨ ? 

	+ Redis (Remote Dictionary Server) 

	 > l√† m·ªôt in-memory data store c·ª±c nhanh
	 > th∆∞·ªùng d√πng l√†m cache, message broker, session store, counter/queue, v.v. 
         > Redis l∆∞u d·ªØ li·ªáu ch·ªß y·∫øu trong RAM n√™n ƒë·ªô tr·ªÖ v√†i micro‚Äìmillisecond, throughput r·∫•t cao.
	 > S·ª≠ d·ª•ng c·∫•u tr√∫c key-value 
	 > N√≥ c√≥ th·ªÉ ghi ra ƒëƒ©a ƒë·ªÉ ch·ªëng m·∫•t d·ªØ li·ªáu (persistence) v√† replication/cluster ƒë·ªÉ ch·ªãu t·∫£i v√† HA. (primary db)

	+ Work flow: API > REDIS > DB


	+ C√°ch m√† redis l∆∞u d·ªØ li·ªáu 

		Vd: a --> { name: "thgien" }
		
		    books --> {"book1", "book2"}



2. T·∫°o DB v·ªõi Redis Cloud

	> C√≥ r·∫•t nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ t·∫°o 1 Redis DB
	
	1. Sign In 
	
	2. T·∫°o DB
	
	3. K·∫øt n·ªëi v·ªõi Redis Insight 


	
3. L√†m quen v·ªõi Redis Insight 


	1. Browser (Tr√¨nh duy·ªát d·ªØ li·ªáu)

ƒê√¢y l√† n∆°i b·∫°n xem, t√¨m ki·∫øm, t·∫°o, s·ª≠a, xo√° key trong Redis.

Tr√™n c√πng c√≥:

All Key Types: filter theo lo·∫°i key (String, Hash, List, Set, ZSet, JSON, Stream,‚Ä¶).

Filter by Key Name or Pattern: t√¨m key b·∫±ng t√™n (c√≥ th·ªÉ d√πng wildcard *).

·ªû gi·ªØa:

Load sample data: t·∫°o s·∫µn m·ªôt s·ªë d·ªØ li·ªáu m·∫´u ƒë·ªÉ b·∫°n test.

+ Add key manually: th√™m key m·ªõi th·ªß c√¥ng (ch·ªçn lo·∫°i key, ƒë·∫∑t t√™n, gi√° tr·ªã).


	2. Key Details Panel (Chi ti·∫øt key)

Khi b·∫°n b·∫•m v√†o m·ªôt key ·ªü panel b√™n tr√°i:

N√≥ s·∫Ω hi·ªÉn th·ªã chi ti·∫øt gi√° tr·ªã c·ªßa key ·ªü panel b√™n ph·∫£i.

B·∫°n c√≥ th·ªÉ:

Edit gi√° tr·ªã.

Delete key.

V·ªõi Hash, List, Set, ZSet, JSON b·∫°n s·∫Ω c√≥ UI ri√™ng ƒë·ªÉ th√™m/xo√°/truy v·∫•n t·ª´ng field.

	3. CLI (Command Line)

·ªû d∆∞·ªõi c√πng b·∫°n th·∫•y tab CLI.

ƒê√¢y l√† m·ªôt terminal nh·ªè cho ph√©p b·∫°n g√µ l·ªánh Redis tr·ª±c ti·∫øp, v√≠ d·ª•:

SET user:1 "Thi·ªán"
GET user:1
LPUSH tasks "task1"
LRANGE tasks 0 -1


N√≥ h·ªØu √≠ch n·∫øu b·∫°n mu·ªën test nhanh l·ªánh thay v√¨ b·∫•m chu·ªôt.

	4. Command Helper

Ngay b√™n c·∫°nh CLI c√≥ tab Command Helper.

ƒê√¢y l√† ch·ªó tra c·ª©u c√∫ ph√°p c√°c l·ªánh Redis.

B·∫°n c√≥ th·ªÉ search l·ªánh SET, GET, HSET, ZRANGE‚Ä¶ v√† n√≥ s·∫Ω hi·ªán chi ti·∫øt usage + v√≠ d·ª•.

	5. Profiler

Tab Profiler d√πng ƒë·ªÉ theo d√µi c√°c l·ªánh ƒëang ch·∫°y trong database, gi√∫p debug performance.


	6. Workbench

ƒê√¢y l√† n∆°i gi·ªëng nh∆∞ SQL Editor trong MySQL Workbench v·∫≠y.

B·∫°n c√≥ th·ªÉ vi·∫øt nhi·ªÅu l·ªánh Redis c√πng l√∫c, chia th√†nh c√°c block v√† ch·∫°y t·ª´ng block ƒë·ªÉ xem k·∫øt qu·∫£.

H·ªØu √≠ch khi b·∫°n mu·ªën test logic nhi·ªÅu b∆∞·ªõc ho·∫∑c copy-paste script Redis.

üëâ V√≠ d·ª• trong Workbench:

SET user:1 "Thi·ªán"
SET user:2 "H·ªçc Redis"

MGET user:1 user:2


B·∫°n ch·∫°y block n√†o th√¨ RedisInsight s·∫Ω hi·ªán k·∫øt qu·∫£ ngay b√™n d∆∞·ªõi block ƒë√≥ (gi√∫p d·ªÖ theo d√µi h∆°n CLI).

	7. Analysis Tool

ƒê√¢y l√† c√¥ng c·ª• ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu v√† hi·ªáu nƒÉng c·ªßa database.

N√≥ cho b·∫°n bi·∫øt:

S·ªë l∆∞·ª£ng key hi·ªán t·∫°i.

Ph√¢n lo·∫°i key theo type (String, List, Hash, JSON‚Ä¶).

Dung l∆∞·ª£ng s·ª≠ d·ª•ng.

Key n√†o l·ªõn nh·∫•t, key n√†o t·ªën RAM nhi·ªÅu nh·∫•t.

C√¥ng c·ª• n√†y h·ªØu √≠ch khi b·∫°n c·∫ßn debug performance ho·∫∑c d·ªçn d·∫πp Redis.

üëâ V√≠ d·ª•: n·∫øu b·∫°n th·∫•y 1 key Hash chi·∫øm 80% dung l∆∞·ª£ng, b·∫°n s·∫Ω bi·∫øt n√™n t·ªëi ∆∞u ch·ªó ƒë√≥.
	
	
	8. Pub/Sub (Publish / Subscribe)

ƒê√¢y l√† t√≠nh nƒÉng truy·ªÅn th√¥ng ƒëi·ªáp trong Redis (message broker).

C∆° ch·∫ø:

M·ªôt client Publish (g·ª≠i) message v√†o m·ªôt channel.

C√°c client kh√°c ƒëang Subscribe (nghe) channel ƒë√≥ s·∫Ω nh·∫≠n message ngay l·∫≠p t·ª©c.

üëâ Trong RedisInsight, tab Pub/Sub gi√∫p b·∫°n:

Subscribe v√†o 1 channel (v√≠ d·ª• chat-room).

Publish message th·ª≠ (v√≠ d·ª• "Hello World!").

Xem tin nh·∫Øn g·ª≠i/nh·∫≠n tr·ª±c ti·∫øp ngay trong UI.

‚ö° ·ª®ng d·ª•ng th·ª±c t·∫ø: chat app realtime, th√¥ng b√°o, event streaming.




4. Basic Command 


	1. STRING 

	( https://redis.io/docs/latest/commands/ )

	*number s·∫Ω t·ª± ƒë·ªông b·ªã convert sang string 


	1. SET key value  > ƒë·∫∑t gi√° tr·ªã 

	2. GET key > l·∫•y gi√° tr·ªã 

	3. DEL key > x√≥a gi√° tr·ªã 

	4. MGET key key , MSET key value key value  > ƒë·∫∑t ho·∫∑c l·∫•y nhi·ªÅu gi√° tr·ªã c√πng l√∫c 

	5. GETRANGE key start end > l·∫•y ra s·ªë l∆∞·ª£ng k√≠ t·ª± nh·∫•t ƒë·ªãnh 

	6. SETRANGE key offset value > ghi ƒë√® gi√° tr·ªã m·ªõi v√†o 1 v·ªã tr√≠ nh·∫•t ƒë·ªãnh 

	7. INCRBY, DECRBY key value > incre or dec l√™n s·ªë gi√° tr·ªã nh·∫•t ƒë·ªãnh 



5. Command Options 

	1. STRING   

		> STRING : name --> "Thien"

SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |
  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]


	. NX  | XX > t√πy ch·ªçn set n·∫øu c√≥ gi√° tr·ªã ho·∫∑c kh√¥ng c√≥ gi√° tr·ªã 

	. EX | PX | EXAT | PXAT > set expire time sau 1 kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh 

	. GET > l·∫•y ra gi√° tr·ªã tr∆∞·ªõc ƒë√≥ c·ªßa key 

	. KEEPTTL > gi·ªØ l·∫°i th·ªùi gian s·ªëng c·ªßa key. 

			> VD: 

				SET key 1 EX 10 : h·∫øt h·∫°n sau 10s 

				SET key 2 KEEPTTL : v·∫´n h·∫øt h·∫°n sau 10s do l·∫•y expire time c·ªßa gi√° tr·ªã tr∆∞·ªõc c·ªßa key 


 

6. SETS

	1. Kh√°i ni·ªám 

	> C√°ch th·ª©c ho·∫°t ƒë·ªông g·∫ßn gi·ªëng obj m√† kh√¥ng c√≥ key, tuy nhi√™n ta k th·ªÉ add c√πng 1 gi√° tr·ªã v√¥ 

	> names: { "THien", "THs", "asd" }

	
	1. SADD	key member > Th√™m nhi·ªÅu data v√†o set 

	2. SREM key member > X√≥a member 
		
	3. SUNION key key > h·ª£p 2 set v√†o l√†m 1 

	4. SISMEMBER key value > check xem member c√≥ thu·ªôc SET ch·ªâ ƒë·ªãnh kh√¥ng 


	
7. LISTS


	1. Kh√°i ni·ªám

List trong Redis l√† m·ªôt danh s√°ch c√≥ th·ª© t·ª± (ordered list), gi·ªëng Array c·ªßa js, ƒë∆∞·ª£c tri·ªÉn khai d∆∞·ªõi d·∫°ng doubly linked list.

M·ªôt list c√≥ th·ªÉ ch·ª©a c√°c chu·ªói (string).

Redis list cho ph√©p th√™m/x√≥a ph·∫ßn t·ª≠ t·ª´ c·∫£ 2 ƒë·∫ßu (tr√°i v√† ph·∫£i) v·ªõi th·ªùi gian O(1).

üëâ C√≥ th·ªÉ h√¨nh dung Redis List gi·ªëng nh∆∞ m·ªôt h√†ng ƒë·ª£i (queue) ho·∫∑c ngƒÉn x·∫øp (stack).


	| L·ªánh                             | T√°c d·ª•ng                                                                                  |
| -------------------------------- | ----------------------------------------------------------------------------------------- |
| **LPUSH key value \[value ...]** | Th√™m 1 ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ v√†o **ƒë·∫ßu (tr√°i)** list                                         |
| **RPUSH key value \[value ...]** | Th√™m 1 ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ v√†o **cu·ªëi (ph·∫£i)** list                                        |
| **LPOP key**                     | L·∫•y v√† x√≥a ph·∫ßn t·ª≠ **ƒë·∫ßu (tr√°i)** list                                                    |
| **RPOP key**                     | L·∫•y v√† x√≥a ph·∫ßn t·ª≠ **cu·ªëi (ph·∫£i)** list                                                   |
| **LRANGE key start stop**        | L·∫•y c√°c ph·∫ßn t·ª≠ trong list t·ª´ `start` ƒë·∫øn `stop` (ch·ªâ s·ªë t·ª´ 0, `-1` l√† ph·∫ßn t·ª≠ cu·ªëi c√πng) |
| **LLEN key**                     | Tr·∫£ v·ªÅ ƒë·ªô d√†i list                                                                        |
| **LINDEX key index**             | L·∫•y ph·∫ßn t·ª≠ ·ªü v·ªã tr√≠ `index`                                                              |
| **LREM key count value**         | X√≥a ph·∫ßn t·ª≠ theo gi√° tr·ªã (count quy ƒë·ªãnh s·ªë l∆∞·ª£ng x√≥a)                                    |
| **LTRIM key start stop**         | Gi·ªØ l·∫°i c√°c ph·∫ßn t·ª≠ trong ph·∫°m vi `[start, stop]`, c√°c ph·∫ßn t·ª≠ kh√°c b·ªã x√≥a                |
| **BLPOP key \[key ...] timeout** | Gi·ªëng `LPOP` nh∆∞ng c√≥ th·ªÉ **block** cho ƒë·∫øn khi c√≥ ph·∫ßn t·ª≠ (d√πng trong queue)             |
| **BRPOP key \[key ...] timeout** | Gi·ªëng `RPOP` nh∆∞ng c√≥ th·ªÉ block                                                           |

	


8. HASH


	1. Kh√°i ni·ªám

Hash trong Redis l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu d·∫°ng b·∫£n ƒë·ªì (map), ch·ª©a c√°c c·∫∑p field ‚Üí value.

C√≥ th·ªÉ coi Hash trong Redis gi·ªëng nh∆∞ m·ªôt object trong JS ho·∫∑c dictionary trong Python.

D√πng Hash r·∫•t ti·ªán ƒë·ªÉ l∆∞u th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng (v√≠ d·ª•: th√¥ng tin user, s·∫£n ph·∫©m‚Ä¶).



| L·ªánh                                        | T√°c d·ª•ng                                              |
| ------------------------------------------- | ----------------------------------------------------- |
| **HSET key field value \[field value ...]** | Th√™m/c·∫≠p nh·∫≠t m·ªôt ho·∫∑c nhi·ªÅu c·∫∑p field‚Äìvalue v√†o hash |
| **HGET key field**                          | L·∫•y gi√° tr·ªã c·ªßa m·ªôt field                             |
| **HGETALL key**                             | L·∫•y to√†n b·ªô field v√† value trong hash                 |
| **HDEL key field \[field ...]**             | X√≥a 1 ho·∫∑c nhi·ªÅu field kh·ªèi hash                      |
| **HLEN key**                                | Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng field trong hash                      |
| **HEXISTS key field**                       | Ki·ªÉm tra xem field c√≥ t·ªìn t·∫°i kh√¥ng                   |
| **HKEYS key**                               | L·∫•y danh s√°ch c√°c field                               |
| **HVALS key**                               | L·∫•y danh s√°ch c√°c value                               |
| **HMGET key field \[field ...]**            | L·∫•y nhi·ªÅu field m·ªôt l√∫c                               |
| **HINCRBY key field increment**             | TƒÉng gi√° tr·ªã s·ªë nguy√™n c·ªßa field l√™n m·ªôt s·ªë nh·∫•t ƒë·ªãnh |
| **HINCRBYFLOAT key field increment**        | TƒÉng gi√° tr·ªã s·ªë th·ª±c                                  |


	VD: HSET books:1 name "Qua tang quoc song" date 2015 price 10$

	* L√≠ do c·∫ßn s·ªë :number sau key 


Redis kh√¥ng c√≥ schema nh∆∞ SQL, ch·ªâ c√≥ key‚Äìvalue.
ƒê·ªÉ t·ªï ch·ª©c d·ªØ li·ªáu cho d·ªÖ qu·∫£n l√Ω, ng∆∞·ªùi ta th∆∞·ªùng theo convention:

Prefix: lo·∫°i d·ªØ li·ªáu (vd: user, order, post)

ID: ƒë·ªãnh danh duy nh·∫•t cho b·∫£n ghi ƒë√≥

K·∫øt h·ª£p l·∫°i: user:1001, order:8888, post:2025

üëâ Nh∆∞ v·∫≠y:

user:1001 ƒë·∫°i di·ªán cho th√¥ng tin c·ªßa user c√≥ ID = 1001

order:8888 ƒë·∫°i di·ªán cho ƒë∆°n h√†ng 8888		




9. Redis Client Library 

	1. Kh√°i ni·ªám 

	 + l√† th∆∞ vi·ªán gi√∫p ·ª©ng d·ª•ng (Node.js, Python, Java, C#, ‚Ä¶) c·ªßa b·∫°n k·∫øt n·ªëi v√† thao t√°c v·ªõi Redis server.

	
	2. Node-Redis cho Nodejs/JS ( https://github.com/redis/node-redis )

	3. Set up Redis v·ªõi Express
	
	// db.js  > l·∫•y trong ph·∫ßn connect c·ªßa redis cloud 

// redisClient.js
const { createClient } = require("redis");
require("dotenv").config();

const client = createClient({
  username: process.env.REDIS_USERNAME,
  password: process.env.REDIS_PASSWORD,
  socket: {
    host: process.env.REDIS_HOST,
    port: process.env.REDIS_PORT,
  },
});

client.on("error", (err) => console.error("Redis Client Error", err));

async function connectRedis() {
  if (!client.isOpen) {
    await client.connect();
    console.log("‚úÖ Connected to Redis Cloud");
  }
}

module.exports = { client, connectRedis };


	// server.js 

const express = require("express");
const { apiRoutes } = require("./routes/api_routes");
const { client, connectRedis } = require("./database/redis_db");
const { config } = require("dotenv");
config();

const app = express();
const port = 4000;
const hostname = "localhost";

// config body-parser
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Connect Redis
(async () => {
  await connectRedis();
})();

// Routes
app.use("/api", apiRoutes);

app.listen(port, () => {
  console.log(`Example app listening on http://${hostname}:${port}`);
});


10. Working with Redis in Express

	1. C√¢u l·ªánh set Hash ƒë∆°n gi·∫£n 


const express = require("express");
const { client } = require("../database/redis_db");

const apiRoutes = express.Router();

apiRoutes.post("/add-books", async (req, res) => {
  await client.hSet("nook:1", {
    title: "Thien"
  })

  return res.send("Okay")
})

module.exports = {
  apiRoutes,
};


 
11. Sorted Sets

	1. Kh√°i ni·ªám 

Sorted Set trong Redis l√† m·ªôt ki·ªÉu d·ªØ li·ªáu ƒë·∫∑c bi·ªát, k·∫øt h·ª£p gi·ªØa Set (t·∫≠p h·ª£p, kh√¥ng tr√πng l·∫∑p) v√† List (c√≥ s·∫Øp x·∫øp theo th·ª© t·ª±).

üëâ ƒêi·ªÉm ch√≠nh:

Gi·ªëng Set: c√°c ph·∫ßn t·ª≠ (member) l√† unique (kh√¥ng tr√πng l·∫∑p).

Kh√°c Set: m·ªói ph·∫ßn t·ª≠ g·∫Øn k√®m m·ªôt score (s·ªë th·ª±c, ki·ªÉu double) d√πng ƒë·ªÉ x·∫øp h·∫°ng.

Redis s·∫Ω t·ª± ƒë·ªông s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ theo score tƒÉng d·∫ßn.



ZADD key score member ‚Üí th√™m/c·∫≠p nh·∫≠t member.

ZRANGE key start stop [WITHSCORES] ‚Üí l·∫•y danh s√°ch t·ª´ nh·ªè ƒë·∫øn l·ªõn.

ZREVRANGE key start stop [WITHSCORES] ‚Üí l·∫•y t·ª´ l·ªõn ƒë·∫øn nh·ªè.

ZSCORE key member ‚Üí l·∫•y score c·ªßa member.

ZRANK key member ‚Üí l·∫•y v·ªã tr√≠ (rank) c·ªßa member (theo th·ª© t·ª± tƒÉng).

ZREVRANK key member ‚Üí rank theo th·ª© t·ª± gi·∫£m.

ZREM key member ‚Üí x√≥a member.



12. Pipelines 

 + Pipeline trong Redis l√† m·ªôt c∆° ch·∫ø cho ph√©p b·∫°n g·ª≠i nhi·ªÅu l·ªánh c√πng l√∫c ƒë·∫øn Redis server m√† kh√¥ng c·∫ßn ch·ªù ph·∫£n h·ªìi t·ª´ng l·ªánh tr∆∞·ªõc khi g·ª≠i l·ªánh ti·∫øp theo.


	VD:


const { createClient } = require("redis");

async function run() {
  const client = createClient();

  await client.connect();

  const pipeline = client.multi(); // ho·∫∑c client.pipeline() trong ioredis

  pipeline.set("user:1", "Alice");
  pipeline.set("user:2", "Bob");
  pipeline.set("user:3", "Charlie");
  pipeline.get("user:1");

// th·ª±c thi pipeline

  const results = await pipeline.exec();
  console.log(results);

  await client.quit();
}

run();


üëâ ·ªû ƒë√¢y: t·∫•t c·∫£ l·ªánh SET v√† GET ƒë∆∞·ª£c g·ª≠i c√πng l√∫c, sau ƒë√≥ Redis tr·∫£ k·∫øt qu·∫£ v·ªÅ theo th·ª© t·ª±.


--------------------------------------------------------

	II. REDIS STACK 


1. Redis Stack l√† g√¨ ?

	+ Redis Stack = Redis c·ªông th√™m c√°c module m·ªü r·ªông ƒë·ªÉ gi·∫£i quy·∫øt nhi·ªÅu nhu c·∫ßu h∆°n.

> Redis Stack t√≠ch h·ª£p:

	 . RedisJSON ‚Üí l∆∞u tr·ªØ v√† query d·ªØ li·ªáu JSON (thay v√¨ ch·ªâ string/hash).

	 . RediSearch ‚Üí full-text search, query ph·ª©c t·∫°p (WHERE, FILTER, INDEX), h·ªó tr·ª£ vector search (AI/ML).

	 . RedisGraph ‚Üí bi·ªÉu di·ªÖn d·ªØ li·ªáu d·∫°ng ƒë·ªì th·ªã (gi·ªëng Neo4j).

	 . RedisTimeSeries ‚Üí qu·∫£n l√Ω d·ªØ li·ªáu chu·ªói th·ªùi gian (IoT, logs, metrics).

 	 . RedisBloom ‚Üí h·ªó tr·ª£ c·∫•u tr√∫c d·ªØ li·ªáu x√°c su·∫•t (Bloom Filter, Count-Min Sketch, Top-K, v.v.).


> L√≠ do n√™n d√πng Redis Stack 

	. Real time app
	
	. sub millisecond process time 

	. Modern data and processsing tool, document, graph, search, time series ]
	
	. Serveral redis client lib support redis stack 

	
	


2. Redis Search 


	üîé Redis Search (RediSearch) l√† g√¨?

		+ RediSearch l√† m·ªôt module c·ªßa Redis Stack cho ph√©p Redis h·ªó tr·ª£ full-text search v√† secondary indexing (t√¨m ki·∫øm vƒÉn b·∫£n v√† t·∫°o index tr√™n d·ªØ li·ªáu).
	

	‚ö° T√°c d·ª•ng c·ªßa Redis Search

		1. Full-text search

			+ C√≥ th·ªÉ index vƒÉn b·∫£n/text ƒë·ªÉ t√¨m ki·∫øm theo t·ª´ kh√≥a.

H·ªó tr·ª£:

T√¨m ki·∫øm t·ª´ kh√≥a ƒë∆°n ho·∫∑c c·ª•m t·ª´.

T√¨m g·∫ßn ƒë√∫ng (fuzzy search).

T√¨m ki·∫øm v·ªõi d·∫•u "*" (wildcard).

Ranking theo ƒë·ªô li√™n quan (gi·ªëng Google).

	
	VD: FT.SEARCH movies "action & marvel" > ‚Üí Tr·∫£ v·ªÅ c√°c phim v·ª´a l√† action v·ª´a li√™n quan ƒë·∫øn Marvel.


		2. Secondary indexing cho Redis

			+ Redis g·ªëc kh√¥ng c√≥ index ph·ª•: b·∫°n ch·ªâ l·∫•y theo key.
			+ RediSearch cho ph√©p b·∫°n t·∫°o index tr√™n JSON, Hash ƒë·ªÉ filter nhanh.
	
		
	VD: FT.SEARCH idx:users "@age:[18 30] @country:Canada"

	‚Üí L·∫•y danh s√°ch user tu·ªïi t·ª´ 18‚Äì30 ·ªü Canada.
(N·∫øu ch·ªâ d√πng Redis th∆∞·ªùng th√¨ ph·∫£i fetch h·∫øt r·ªìi l·ªçc b·∫±ng code ‚Üí r·∫•t t·ªën k√©m).



		3. Truy v·∫•n n√¢ng cao

H·ªó tr·ª£ AND, OR, NOT.

Range queries (s·ªë, ng√†y, time).

Sort theo field (vd: gi√° t·ª´ th·∫•p ƒë·∫øn cao).

Geo search (t√¨m ƒë·ªãa ƒëi·ªÉm g·∫ßn m·ªôt t·ªça ƒë·ªô).




		4. K·∫øt h·ª£p v·ªõi RedisJSON

RedisJSON l∆∞u d·ªØ li·ªáu d·∫°ng JSON, RediSearch c√≥ th·ªÉ index tr·ª±c ti·∫øp field trong JSON ƒë·ªÉ search.
üëâ Gi√∫p b·∫°n d√πng Redis nh∆∞ m·ªôt document database (gi·ªëng MongoDB + Elasticsearch g·ªôp chung).



	üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø c·ªßa RediSearch


üîç Search bar / Autocomplete trong website (g√µ v√†i ch·ªØ g·ª£i √Ω ngay).

üìö Catalog search: t√¨m s·∫£n ph·∫©m trong e-commerce (l·ªçc theo t√™n, gi√°, category).

üé¨ Movie search engine: t√¨m theo title, genre, nƒÉm ph√°t h√†nh.

üìä Log / analytics realtime: l·ªçc d·ªØ li·ªáu log, event.

üåç Location search: t√¨m c·ª≠a h√†ng g·∫ßn b·∫°n.


		
 		> Gi·∫£i th√≠ch qua 1 s·ªë c√¢u l·ªánh 

	1. FT.CREATE 

		üìå FT.CREATE l√† g√¨?

FT.CREATE d√πng ƒë·ªÉ t·∫°o index trong Redis Search.
Khi c√≥ index r·ªìi, b·∫°n m·ªõi c√≥ th·ªÉ d√πng FT.SEARCH, FT.AGGREGATE ƒë·ªÉ query d·ªØ li·ªáu nhanh theo n·ªôi dung, s·ªë, tag, geo, v.v.

N·∫øu kh√¥ng c√≥ index ‚Üí Redis ch·ªâ bi·∫øt l·∫•y theo key, kh√¥ng search n√¢ng cao ƒë∆∞·ª£c.


		üìö C√∫ ph√°p c∆° b·∫£n


FT.CREATE index_name 
  ON {HASH | JSON} 
  PREFIX <num> <prefix1> [<prefix2> ...] 
  SCHEMA field1 type [options] field2 type [options] ...


		VD: t·∫°o index cho user 

FT.CREATE idx:users ON JSON PREFIX 1 user: 
  SCHEMA $.name AS name TEXT 
         $.age AS age NUMERIC 
         $.country AS country TAG


		Gi·∫£i th√≠ch:

			+ idx: > ƒë·∫∑t t√™n cho index
			+ ON: > ki·ªÉu d·ªØ li·ªáu c·ªßa user json | hash
			+ prefix: ch·ªâ index cho nh·ªØng key n√†o c√≥ ti·ªÅn t·ªë l√† user: 
			+ 1:  s·ªë l∆∞·ª£ng ti·ªÅn t·ªë			
			
			+. SCHEMA

Khai b√°o c·∫•u tr√∫c index (c√°c field n√†o s·∫Ω ƒë∆∞·ª£c index v√† ki·ªÉu d·ªØ li·ªáu c·ªßa ch√∫ng).

Trong v√≠ d·ª•:

$.name AS name TEXT
‚Üí l·∫•y field $.name trong JSON, ƒë·∫∑t alias l√† name, ki·ªÉu TEXT (cho ph√©p full-text search).

$.age AS age NUMERIC
‚Üí field age l√† ki·ªÉu s·ªë ‚Üí c√≥ th·ªÉ d√πng ƒë·ªÉ filter theo range (18‚Äì30).

$.country AS country TAG
‚Üí field country l√† ki·ªÉu TAG (ph√¢n lo·∫°i, d√πng ƒë·ªÉ filter, nh∆∞ng kh√¥ng full-text search).




3. RedisJSON
	
	1. RedisJSON l√† g√¨
	
	+ RedisJSON l√† m·ªôt module trong Redis Stack cho ph√©p b·∫°n l∆∞u tr·ªØ v√† thao t√°c d·ªØ li·ªáu JSON g·ªëc trong Redis.
	+ Thay v√¨ Redis th∆∞·ªùng ph·∫£i serialize object ‚Üí string (JSON.stringify) r·ªìi SET key value, v·ªõi RedisJSON b·∫°n c√≥ th·ªÉ l∆∞u, ƒë·ªçc, ch·ªânh s·ª≠a tr·ª±c ti·∫øp field trong JSON ngay trong Redis.
	

	üîë √ù nghƒ©a c·ªßa $ trong RedisJSON

		$ = root (g·ªëc) c·ªßa JSON document.

		T·ª´ $, b·∫°n ƒëi s√¢u v√†o c√°c field b·∫±ng d·∫•u . ho·∫∑c [].


	‚ö° T√°c d·ª•ng c·ªßa RedisJSON

		1. L∆∞u tr·ªØ JSON g·ªëc

		+ L∆∞u d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON th·ª±c s·ª±, kh√¥ng c·∫ßn convert sang string.

		üëâ V√≠ d·ª•: JSON.SET user:1 $ '{"name":"Alice","age":25,"country":"Canada"}'
		
	

		2. Truy c·∫≠p tr·ª±c ti·∫øp field

		+ Kh√¥ng c·∫ßn fetch nguy√™n JSON v·ªÅ client ƒë·ªÉ ch·ªânh s·ª≠a. B·∫°n c√≥ th·ªÉ thao t√°c tr·ª±c ti·∫øp tr√™n Redis:
			
		VD: 
			JSON.GET user:1 $.name         # L·∫•y field name
			JSON.SET user:1 $.age 26       # C·∫≠p nh·∫≠t tu·ªïi
			JSON.DEL user:1 $.country      # X√≥a field

			
		3. H·ªó tr·ª£ query s√¢u (path)

		+ C√≥ th·ªÉ truy c·∫≠p c√°c field l·ªìng nhau b·∫±ng JSONPath ($):
		
		VD: 
	
			JSON.SET product:1 $ '{"id":101,"info":{"name":"Laptop","price":1200}}'
			JSON.GET product:1 $.info.price

	
		4. K·∫øt h·ª£p v·ªõi RediSearch

		+ RedisJSON + RediSearch = c·ª±c m·∫°nh üöÄ
		+ B·∫°n c√≥ th·ªÉ index field trong JSON ƒë·ªÉ search nh∆∞ database th·ª±c th·ª•.
			

		5. Hi·ªáu nƒÉng cao

		+ RedisJSON l∆∞u tr·ªØ v√† truy c·∫≠p d·ªØ li·ªáu in-memory, t·ªëi ∆∞u h√≥a cho:

			Realtime app (chat, social, game).

			Microservices (l∆∞u state, config, user session).

			E-commerce (l∆∞u product catalog + search b·∫±ng RediSearch).	


	üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø c·ªßa RedisJSON

üõí Product catalog: l∆∞u s·∫£n ph·∫©m (t√™n, gi√°, category, t·ªìn kho).

üë§ User profile: l∆∞u user (name, email, role, setting).

üìä Session / cache n√¢ng cao: l∆∞u session v·ªõi nhi·ªÅu metadata.

üîç Search + filter (khi k·∫øt h·ª£p v·ªõi RediSearch).

üìà Realtime analytics: c·∫≠p nh·∫≠t JSON theo th·ªùi gian.	
			

	

4. RedisGraph 

	
	üìå RedisGraph l√† g√¨?

		+ RedisGraph l√† module trong Redis Stack cho ph√©p Redis ho·∫°t ƒë·ªông nh∆∞ m·ªôt graph database (c∆° s·ªü d·ªØ li·ªáu ƒë·ªì th·ªã).

	üëâ Graph r·∫•t ph√π h·ª£p cho c√°c b√†i to√°n nh∆∞: m·∫°ng x√£ h·ªôi, g·ª£i √Ω b·∫°n b√®, quan h·ªá gi·ªØa s·∫£n ph·∫©m, knowledge graph, recommendation system.


	üï∏Ô∏è C√°ch t∆∞ duy trong RedisGraph (v√† graph database n√≥i chung)

		
		+ ƒê·ªânh (Node / Vertex):

ƒê·∫°i di·ªán cho m·ªôt th·ª±c th·ªÉ (entity).
V√≠ d·ª•: m·ªôt ng∆∞·ªùi d√πng, m·ªôt b·ªô phim, m·ªôt s·∫£n ph·∫©m.

		+ C·∫°nh (Edge):

ƒê·∫°i di·ªán cho m·ªëi quan h·ªá gi·ªØa c√°c ƒë·ªânh.
V√≠ d·ª•: "Alice FRIEND Bob", "User LIKES Movie".

		+ Thu·ªôc t√≠nh (Properties):

C·∫£ Node v√† Edge ƒë·ªÅu c√≥ th·ªÉ c√≥ thu·ªôc t√≠nh.

V√≠ d·ª•:

Node Person {name: "Alice", age: 25}

Edge FRIEND {since: 2020}
	

	
	** REDIS GRAPH  ƒë√£ EOL t·ª´ ƒë·∫ßu nƒÉm 2025. ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ



5. RedisTimeSeries 

	üìå RedisTimeSeries l√† g√¨?

RedisTimeSeries l√† m·ªôt module trong Redis Stack ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ l∆∞u tr·ªØ v√† x·ª≠ l√Ω chu·ªói th·ªùi gian (time-series data), t·ª©c l√† d·ªØ li·ªáu c√≥ d·∫°ng: (timestamp, value)

	
	üõ†Ô∏è C√°c l·ªánh c∆° b·∫£n trong RedisTimeSeries

		1. T·∫°o chu·ªói th·ªùi gian

		VD: TS.CREATE temperature:room1 RETENTION 60000 LABELS sensor room1 type temperature
		
			TS.CREATE key ‚Üí t·∫°o m·ªôt chu·ªói th·ªùi gian m·ªõi.

			RETENTION 60000 ‚Üí d·ªØ li·ªáu c≈© h∆°n 60 gi√¢y (60000 ms) s·∫Ω b·ªã x√≥a.

			LABELS ‚Üí th√™m metadata ƒë·ªÉ sau n√†y filter (vd: sensor=room1).


		2. Th√™m d·ªØ li·ªáu (insert)

		VD: TS.ADD temperature:room1 * 25.3

			* ‚Üí Redis t·ª± l·∫•y timestamp hi·ªán t·∫°i (epoch time).

			25.3 ‚Üí gi√° tr·ªã ƒëo ƒë∆∞·ª£c (nhi·ªát ƒë·ªô).
			

		3. L·∫•y d·ªØ li·ªáu

		VD: TS.RANGE temperature:room1 - + 

			- = t·ª´ ƒë·∫ßu, + = ƒë·∫øn hi·ªán t·∫°i.

				V√≠ d·ª•: l·∫•y d·ªØ li·ªáu trong 1 ph√∫t qua:

					TS.RANGE temperature:room1 -60000 +


				L·∫•y d·ªØ li·ªáu c·ªßa nhi·ªÅu chu·ªói:

					TS.MRANGE - + FILTER type=temperature


		4. Th·ªëng k√™, downsample (aggregation)

			TS.RANGE temperature:room1 - + AGGREGATION avg 10000




	‚ö° T√°c d·ª•ng c·ªßa RedisTimeSeries


		1. L∆∞u tr·ªØ d·ªØ li·ªáu time-series hi·ªáu qu·∫£

T·ªëi ∆∞u b·ªô nh·ªõ cho d·ªØ li·ªáu (timestamp, value).

C√≥ c∆° ch·∫ø retention ƒë·ªÉ t·ª± ƒë·ªông x√≥a d·ªØ li·ªáu c≈©.

		2. X·ª≠ l√Ω d·ªØ li·ªáu chu·ªói th·ªùi gian realtime

Query nhanh theo time range.

T√≠nh to√°n aggregation (avg, min, max, sum, count, stddev, ‚Ä¶).

		3. Qu·∫£n l√Ω metadata b·∫±ng labels

M·ªói chu·ªói c√≥ th·ªÉ c√≥ label ‚Üí d·ªÖ d√†ng filter khi query nhi·ªÅu sensor, nhi·ªÅu metric.

		4. T√≠ch h·ª£p v·ªõi RedisInsight

RedisInsight c√≥ tab TimeSeries, t·ª± ƒë·ªông v·∫Ω bi·ªÉu ƒë·ªì khi b·∫°n query d·ªØ li·ªáu.
üëâ R·∫•t ti·ªán cho vi·ªác monitoring v√† debug.



      // R√∫t ra b√†i h·ªçc nh∆∞ sau 
      /**
       * time series ch·ªâ ƒë∆°n gi·∫£n gi√∫p ta tr·∫£ v·ªÅ ƒë·ªì th·ªã c·ªßa 1 kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh g·ªìm time + value t·ª´ ƒë√≥ ta c√≥ th·ªÉ l√†m vi·ªác v·ªõi n√≥
       *  - +  gi√∫p ta tr·∫£ v·ªÅ to√†n b·ªô time series 
       *  retetion: s·∫Ω gi√∫p ta lo·∫°i b·ªè d·ªØ li·ªáu ƒë√£ c≈©.
       *      + gi·∫£ s·ª≠ ta ƒë·∫∑t l√† 1 ti·∫øng, sau ƒë√≥ ta th√™m d·ªØ li·ªáu v√†o m·ªói 10p th√¨ c·ª© sau 1 ti·∫øng nh·ªØng d·ªØ li·ªáu ƒë√£ th√™m qu√° 1 ti·∫øng tr∆∞·ªõc s·∫Ω b·ªã x√≥a
       *          VD: 1h> 100$  1h:30 1200$  2h:1: 100$  => d·ªØ li·ªáu t·ª´ 1h:100$ s·∫Ω b·ªã x√≥a
       *      + expires s·∫Ω ngon h∆°n n·∫øu ta c√≥ 1 chu·ªói th·ªùi gian c·ªë ƒë·ªãnh kh√¥ng th√™m, retention n·∫øu ta c·ª© th√™m d·∫ßn d·∫ßn v√†o chu·ªói th·ªùi gian
       *      
       */



	üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø

üìä Monitoring system: log CPU, RAM, network usage.

üå°Ô∏è IoT sensor data: ƒëo nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, √°nh s√°ng.

üí∞ Finance: theo d√µi gi√° c·ªï phi·∫øu/crypto theo th·ªùi gian.

üõí E-commerce: l∆∞u l∆∞·ª£ng truy c·∫≠p website theo t·ª´ng ph√∫t.




6. RedisBloom 

	üìå RedisBloom l√† g√¨?

	+ RedisBloom l√† m·ªôt module trong Redis Stack cung c·∫•p c√°c probabilistic data structures (c·∫•u tr√∫c d·ªØ li·ªáu x√°c su·∫•t).	
	+ N√≥i ƒë∆°n gi·∫£n: n√≥ gi√∫p b·∫°n l∆∞u tr·ªØ v√† ki·ªÉm tra d·ªØ li·ªáu si√™u nhanh, si√™u ti·∫øt ki·ªám b·ªô nh·ªõ, nh∆∞ng k·∫øt qu·∫£ c√≥ th·ªÉ x√°c su·∫•t sai l·ªách nh·ªè (false positive).

	
	üëâ C√°c c·∫•u tr√∫c d·ªØ li·ªáu trong RedisBloom:

		+ Bloom Filter

		+ Cuckoo Filter

		+ Count-Min Sketch

		+ Top-K


	üõ†Ô∏è Gi·∫£i th√≠ch t·ª´ng lo·∫°i

		1. Bloom Filter

D√πng ƒë·ªÉ ki·ªÉm tra m·ªôt ph·∫ßn t·ª≠ c√≥ th·ªÉ t·ªìn t·∫°i trong t·∫≠p d·ªØ li·ªáu hay kh√¥ng.

R·∫•t nh·∫π, c·ª±c nhanh, nh∆∞ng c√≥ kh·∫£ nƒÉng false positive (tr·∫£ v·ªÅ "c√≥" d√π th·∫≠t ra kh√¥ng t·ªìn t·∫°i).

V√≠ d·ª•: ki·ªÉm tra xem email c√≥ trong danh s√°ch spam kh√¥ng.

	BF.RESERVE bf 0.01 1000
	BF.ADD bf "alice"
	BF.EXISTS bf "alice"   # ‚Üí 1 (c√≥)
	BF.EXISTS bf "bob"     # ‚Üí 0 (kh√¥ng)


		2. Cuckoo Filter

Gi·ªëng Bloom Filter nh∆∞ng h·ªó tr·ª£ x√≥a ph·∫ßn t·ª≠.

Th√≠ch h·ª£p khi b·∫°n c·∫ßn th√™m v√† x√≥a d·ªØ li·ªáu li√™n t·ª•c.

VD: 

CF.RESERVE cf 1000
CF.ADD cf "alice"
CF.DEL cf "alice"
CF.EXISTS cf "alice"  # ‚Üí 0

	
		3. Count-Min Sketch

D√πng ƒë·ªÉ ƒë·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c ph·∫ßn t·ª≠ trong lu·ªìng d·ªØ li·ªáu.

V√≠ d·ª•: ƒë·∫øm s·ªë l·∫ßn m·ªói t·ª´ xu·∫•t hi·ªán trong log truy c·∫≠p.

VD: 

CMS.INITBYDIM cms 2000 5 > 
CMS.INCRBY cms "apple" 3 "banana" 2
CMS.QUERY cms "apple" "banana"   # ‚Üí [3,2]


	Gi·∫£i th√≠ch r√µ ƒëo·∫°n n√†y 

	1. T·∫°o ra 1 ma tr·∫≠n g·ªìm 5 h√†ng v√† 2000 c·ªôt trong m·ªói h√†ng 

H1: [0,0,0,0,0,0,0,0,0,0]
H2: [0,0,0,0,0,0,0,0,0,0]
H3: [0,0,0,0,0,0,0,0,0,0]
H4: [0,0,0,0,0,0,0,0,0,0]
H5: [0,0,0,0,0,0,0,0,0,0]


	2. incrby s·∫Ω n√©m ng·∫´u nhi√™n apple 3 v√† banana 2 v√†o trong c·∫£ 5 h√†ng ·ªü v·ªã tr√≠ ng·∫´u nhi√™n
		   _ c√≥ th·ªÉ n√©m tr√πng nhau d·∫´n ƒë·∫øn c·ªông d·ªìn

H1: [0,3,2,0,0,0,0,0,0,0]
H2: [0,0,0,0,5,0,0,0,0,0]
H3: [0,0,0,0,0,2,3,0,0,0]
H4: [5,0,0,0,0,0,0,0,0,0]
H5: [0,0,0,2,0,0,0,0,3,0]


	3. Query

CMS.QUERY cms "apple" ‚Üí l·∫•y min ·ªü [3,5,3,5,3] = 3 ‚úÖ  

CMS.QUERY cms "banana" ‚Üí l·∫•y min ·ªü [2,5,2,5,2] = 2 ‚úÖ
		
> >  n√≥ d·ª±a v√†o s·ªë tƒÉng ban ƒë·∫ßu ƒë·ªÉ l·∫•y ra chu·ªói v√† l·∫•y min trong ƒë√≥, s·ªë min ch√≠nh l√† t·∫ßn su·∫•t xu·∫©t hi·ªán c·ªßa n√≥


		4. Top-K

D√πng ƒë·ªÉ gi·ªØ danh s√°ch K ph·∫ßn t·ª≠ ph·ªï bi·∫øn nh·∫•t trong lu·ªìng d·ªØ li·ªáu.

V√≠ d·ª•: t·ª´ kh√≥a ƒë∆∞·ª£c t√¨m ki·∫øm nhi·ªÅu nh·∫•t.

TOPK.RESERVE tk 5
TOPK.ADD tk "apple" "banana" "orange"
TOPK.LIST tk   # ‚Üí danh s√°ch 5 t·ª´ kh√≥a ph·ªï bi·∫øn nh·∫•t


		‚ö° T√°c d·ª•ng c·ªßa RedisBloom

		1. Ti·∫øt ki·ªám b·ªô nh·ªõ

Kh√¥ng c·∫ßn l∆∞u to√†n b·ªô d·ªØ li·ªáu m√† ch·ªâ c·∫ßn l∆∞u c·∫•u tr√∫c x√°c su·∫•t.

R·∫•t h·ªØu √≠ch khi x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn (Big Data, streaming).

		2. Hi·ªáu nƒÉng cao

Ki·ªÉm tra membership hay ƒë·∫øm t·∫ßn su·∫•t c·ª±c nhanh (O(1)).

		3. ·ª®ng d·ª•ng th·ª±c t·∫ø

üîí Anti-spam / blacklist: ki·ªÉm tra nhanh email/username ƒë√£ t·ªìn t·∫°i.

üìà Analytics: ƒë·∫øm t·∫ßn su·∫•t t·ª´ kh√≥a, tracking clickstream.

üõí E-commerce: g·ª£i √Ω s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t (Top-K).

üöÄ Big Data systems: gi·∫£m t·∫£i cho database ch√≠nh b·∫±ng pre-check v·ªõi Bloom Filter.



			
	
